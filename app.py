{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f59d66d7-95cc-4e9f-a4f2-b6eb689d71ca",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-09-22 17:03:30.911 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-22 17:03:30.914 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-22 17:03:30.916 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-22 17:03:30.922 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-22 17:03:30.923 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-22 17:03:30.925 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-22 17:03:30.928 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-09-22 17:03:30.930 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import glob\n",
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from docx import Document\n",
    "from docx.shared import Inches\n",
    "from io import BytesIO\n",
    "\n",
    "# Create tmp folder\n",
    "os.makedirs(\"tmp\", exist_ok=True)\n",
    "\n",
    "# App settings\n",
    "st.set_page_config(page_title=\"AI-Powered Data Storyteller\", layout=\"wide\")\n",
    "st.title(\"üìä AI-Powered Data Storyteller\")\n",
    "\n",
    "# ---------- Utility functions ----------\n",
    "\n",
    "def auto_insights(df):\n",
    "    insights = []\n",
    "    nrows, ncols = df.shape\n",
    "    insights.append(f\"The dataset has {nrows} rows and {ncols} columns.\")\n",
    "\n",
    "    # Missing values\n",
    "    miss = (df.isnull().mean() * 100).sort_values(ascending=False)\n",
    "    for col, pct in miss.head(5).items():\n",
    "        if pct > 0:\n",
    "            insights.append(f\"Column '{col}' has {pct:.0f}% missing values.\")\n",
    "\n",
    "    # Numeric overview\n",
    "    num = df.select_dtypes(include=\"number\")\n",
    "    if not num.empty:\n",
    "        top_var = num.var().sort_values(ascending=False).index[0]\n",
    "        insights.append(f\"Highest variance in numeric columns: {top_var}\")\n",
    "        corr = num.corr().abs().unstack().sort_values(ascending=False)\n",
    "        corr = corr[corr < 1].drop_duplicates().head(3)\n",
    "        for (a, b), v in corr.items():\n",
    "            insights.append(f\"Correlation {a} vs {b}: {v:.2f}\")\n",
    "    return insights\n",
    "\n",
    "def generate_plots(df):\n",
    "    # Clean up old plots\n",
    "    for f in glob.glob(\"tmp/*.png\"):\n",
    "        os.remove(f)\n",
    "\n",
    "    plot_paths = []\n",
    "\n",
    "    # Bar chart for first categorical\n",
    "    cat_cols = df.select_dtypes(exclude=\"number\").columns\n",
    "    if len(cat_cols) > 0:\n",
    "        plt.figure(figsize=(6,4))\n",
    "        df[cat_cols[0]].value_counts().head(10).plot.bar()\n",
    "        plt.title(f\"Top categories in {cat_cols[0]}\")\n",
    "        path = \"tmp/bar.png\"\n",
    "        plt.savefig(path); plt.close()\n",
    "        plot_paths.append(path)\n",
    "\n",
    "    # Line chart for first numeric vs index\n",
    "    num_cols = df.select_dtypes(include=\"number\").columns\n",
    "    if len(num_cols) > 0:\n",
    "        plt.figure(figsize=(6,4))\n",
    "        df[num_cols[0]].head(50).plot.line()\n",
    "        plt.title(f\"Trend of {num_cols[0]}\")\n",
    "        path = \"tmp/line.png\"\n",
    "        plt.savefig(path); plt.close()\n",
    "        plot_paths.append(path)\n",
    "\n",
    "    # Heatmap of correlations\n",
    "    if len(num_cols) > 1:\n",
    "        corr = df[num_cols].corr()\n",
    "        plt.figure(figsize=(6,4))\n",
    "        sns.heatmap(corr, annot=True, fmt=\".2f\", cmap=\"coolwarm\")\n",
    "        plt.title(\"Correlation Heatmap\")\n",
    "        path = \"tmp/heatmap.png\"\n",
    "        plt.savefig(path); plt.close()\n",
    "        plot_paths.append(path)\n",
    "\n",
    "    return plot_paths\n",
    "\n",
    "def generate_report(insights, plot_paths):\n",
    "    doc = Document()\n",
    "    doc.add_heading(\"Executive Summary\", level=1)\n",
    "    for i in insights:\n",
    "        doc.add_paragraph(i)\n",
    "\n",
    "    doc.add_heading(\"Key Charts\", level=1)\n",
    "    for p in plot_paths:\n",
    "        doc.add_picture(p, width=Inches(5))\n",
    "\n",
    "    # Save to in-memory buffer\n",
    "    buffer = BytesIO()\n",
    "    doc.save(buffer)\n",
    "    buffer.seek(0)\n",
    "    return buffer\n",
    "\n",
    "# ---------- Streamlit App Workflow ----------\n",
    "\n",
    "uploaded_file = st.file_uploader(\"üìÅ Upload a CSV file\", type=\"csv\")\n",
    "\n",
    "if uploaded_file:\n",
    "    try:\n",
    "        df = pd.read_csv(uploaded_file)\n",
    "    except Exception as e:\n",
    "        st.error(f\"‚ùå Failed to read CSV file: {e}\")\n",
    "        st.stop()\n",
    "\n",
    "    st.write(\"### üëÄ Preview of Data\")\n",
    "    st.dataframe(df.head())\n",
    "\n",
    "    if df.shape[0] < 2 or df.shape[1] < 1:\n",
    "        st.error(\"‚ùå Dataset too small for analysis.\")\n",
    "    else:\n",
    "        # Generate insights\n",
    "        st.write(\"### üîé Insights\")\n",
    "        with st.spinner(\"Generating insights...\"):\n",
    "            insights = auto_insights(df)\n",
    "        for i in insights:\n",
    "            st.write(\"‚Ä¢\", i)\n",
    "\n",
    "        # Generate plots\n",
    "        st.write(\"### üìà Plots\")\n",
    "        with st.spinner(\"Generating plots...\"):\n",
    "            plot_paths = generate_plots(df)\n",
    "        for p in plot_paths:\n",
    "            st.image(p)\n",
    "\n",
    "        # Generate and download report\n",
    "        if st.button(\"üìÑ Generate Executive Report\"):\n",
    "            with st.spinner(\"Creating report...\"):\n",
    "                report_buffer = generate_report(insights, plot_paths)\n",
    "            st.success(\"‚úÖ Report ready!\")\n",
    "            st.download_button(\"‚¨áÔ∏è Download Report\", report_buffer, file_name=\"executive_report.docx\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
